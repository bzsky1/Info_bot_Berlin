import telebot
import config, text
import random

from telebot import types

bot = telebot.TeleBot(config.TOKEN)

@bot.message_handler(commands=['start'])
def welcome(message):
    sti = open('static/welcome.webp', 'rb')
    bot.send_sticker(message.chat.id, sti)

    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í–∏–¥ –Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è")
    item2 = types.KeyboardButton("Jobcenter")
    item3 = types.KeyboardButton("–ñ–∏—Ç–ª–æ")
    item4 = types.KeyboardButton("–†–æ–±–æ—Ç–∞")
    item5 = types.KeyboardButton("–ö–æ—Ä–∏—Å–Ω—ñ –∫–∞–Ω–∞–ª–∏")
    item6 = types.KeyboardButton("–ó–≤'—è–∑–æ–∫ –∑ –∞–≤—Ç–æ—Ä–æ–º")
    item7 = types.KeyboardButton("–í–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ")

    markup.add(item1, item2, item3, item4, item5, item6, item7)

    bot.send_message(message.chat.id, "–í—ñ—Ç–∞—é, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —â–æ–± –¥–æ–ø–æ–º–æ–≥–∞—Ç–∏ –∫–æ—Ä–∏—Å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é!".format(message.from_user, bot.get_me()),
        parse_mode='html', reply_markup=markup)

@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.chat.type == 'private':
        if message.text == "–í–∏–¥ –Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è":
            bot.send_message(message.chat.id, text.vnp, parse_mode='html', disable_web_page_preview=True)
        elif message.text == "Jobcenter":
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data='dopInfoJobc')
            item2 = types.InlineKeyboardButton("–ö–æ—Ä–∏—Å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó", callback_data='korInfoJobc')
            
            markup.add(item1, item2)
            
            bot.send_message(message.chat.id, text.jobcenter, parse_mode='html', disable_web_page_preview=True, reply_markup=markup)
        elif message.text == "–ñ–∏—Ç–ª–æ":
            bot.send_message(message.chat.id, text.zhytlo, parse_mode='html')
        elif message.text == "–†–æ–±–æ—Ç–∞":
            bot.send_message(message.chat.id, text.robota, parse_mode='html')
        elif message.text == "–ö–æ—Ä–∏—Å–Ω—ñ –∫–∞–Ω–∞–ª–∏":
            bot.send_message(message.chat.id, text.links, parse_mode='html')
        elif message.text == '–í–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ':
            bot.send_message(message.chat.id, str(random.randint(0, 100)))
        elif message.text == "–ó–≤'—è–∑–æ–∫ –∑ –∞–≤—Ç–æ—Ä–æ–º":
            bot.send_message(message.chat.id, "–Ø–∫—â–æ —É –í–∞—Å —î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—à–∞ —á–∏ –±—ñ–ª—å—à –ø–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è, "
                                              "–∞–±–æ –∂ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —á–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è - –º–æ–∂–µ—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ –∑ @hdrhighd")
        elif (message.text == "–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!") or (message.text == "—Å–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!") or (message.text == "—Å–ª–∞–≤–∞ —É–∫—Ä–∞—ó–Ω—ñ!") or (message.text == "–°–ª–∞–≤–∞ —É–∫—Ä–∞—ó–Ω—ñ!") or (message.text == "–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ") or (message.text == "—Å–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ") or (message.text == "—Å–ª–∞–≤–∞ —É–∫—Ä–∞—ó–Ω—ñ") or (message.text == "–°–ª–∞–≤–∞ —É–∫—Ä–∞—ó–Ω—ñ"):
            bot.send_message(message.chat.id, "–ì–µ—Ä–æ—è–º —Å–ª–∞–≤–∞!")
        elif (message.text == "–°–ª–∞–≤–∞ –ù–∞—Ü—ñ—ó!") or (message.text == "—Å–ª–∞–≤–∞ –ù–∞—Ü—ñ—ó!") or (message.text == "—Å–ª–∞–≤–∞ –Ω–∞—Ü—ñ—ó!") or (message.text == "–°–ª–∞–≤–∞ –ù–∞—Ü—ñ—ó") or (message.text == "—Å–ª–∞–≤–∞ –ù–∞—Ü—ñ—ó") or (message.text == "—Å–ª–∞–≤–∞ –Ω–∞—Ü—ñ—ó") or (message.text == "–°–ª–∞–≤–∞ –Ω–∞—Ü—ñ—ó") or (message.text == "–°–ª–∞–≤–∞ –Ω–∞—Ü—ñ—ó!"):
                bot.send_message(message.chat.id, "–ü@^!&—Ü—å —Ä–æ—Å—ñ–π—Å—å–∫—ñ–π —Ñ–µ–¥–µ—Ä–∞—Ü—ñ—ó")
        else:
            answers = ["–ü–µ—Ä–µ–ø—Ä–æ—à—É—é, —è –±–∏ –∑ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è–º –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞–≤—Å—è –∑ –í–∞–º–∏, –∞–ª–µ —è —â–µ –Ω–µ –Ω–∞–≤—á–∏–≤—Å—è",
                       "–ù–∞–≤—ñ—Ç—å –Ω–µ –∑–Ω–∞—é —â–æ —Ç—É—Ç –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏",
                       "–ö—Ä–∞—â–µ –í–∞–º –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å –∑ –º–æ—ó–º –∞–≤—Ç–æ—Ä–æ–º", "–ú—Ä—ñ—é —Å—Ç–∞—Ç–∏ –ª—é–¥–∏–Ω–æ—é, —â–æ–± –±—É—Ç–∏ –£–∫—Ä–∞—ó–Ω—Ü–µ–º!", "–•–æ—á—É –±–æ—Ä—â—É",
                       "–ù–∞ –∂–∞–ª—å, —è –ø–æ–∫–∏ —â–æ –Ω–µ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∑–Ω–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç—ñ–ª—å–∫–∏ –Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞ üôÉ", "–ó —Ä–∞–¥—ñ—Å—Ç—é –±–∏ –≤—ñ–¥–ø–æ–≤—ñ–≤, –∞–ª–µ —è –ø–æ–∫–∏ —â–æ –Ω–µ –º–æ–∂—É"]
            random_message = lambda : random.choice(answers)
            bot.send_message(message.chat.id, random_message())

@bot.callback_query_handler(func=lambda call: True)
def callback_inline_jobc(call):
    try:
        if call.message:
            if call.data == 'dopInfoJobc':
                bot.send_message(call.message.chat.id, text.dopInfoJobc, parse_mode='html')
            elif call.data == 'korInfoJobc':
                bot.send_message(call.message.chat.id, text.korInfoJobc, parse_mode='html')

            # show alert
            bot.answer_callback_query(callback_query_id=call.id, show_alert=True,
                 text="–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç–æ–≤—ñ—Ä–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∫—Ä–∞—â–µ –ø—Ä–æ –≤—Å–µ –∑–∞–ø–∏—Ç–∞—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ Jobcenter –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó!")

    except Exception as e:
        print(repr(e))

# RUN
bot.polling(none_stop=True)